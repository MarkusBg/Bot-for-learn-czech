import os
from dotenv import load_dotenv
import telebot
from telebot import types
from transitions import Machine
from datetime import datetime, time
import time as sleep_time
import threading

load_dotenv('.env')
token = os.getenv('token')

bot = telebot.TeleBot(token)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

class LearnBot:
    states = ['start', 'writing_words', 'checking_words', 'learning_mode']
    
    transitions = [
        # –ü–µ—Ä–µ—Ö–æ–¥—ã –∏–∑ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        {'trigger': 'go', 'source': 'start', 'dest': 'writing_words'},
        {'trigger': 'help', 'source': 'start', 'dest': 'start'},
        {'trigger': 'list', 'source': 'start', 'dest': 'checking_words'},
        
        # –ü–µ—Ä–µ—Ö–æ–¥—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è writing_words
        {'trigger': 'list', 'source': 'writing_words', 'dest': 'checking_words'},
        {'trigger': 'ready', 'source': 'writing_words', 'dest': 'learning_mode'},
        {'trigger': 'back', 'source': 'writing_words', 'dest': 'start'},
        
        # –ü–µ—Ä–µ—Ö–æ–¥—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è checking_words
        {'trigger': 'back', 'source': 'checking_words', 'dest': 'writing_words'},
        {'trigger': 'ready', 'source': 'checking_words', 'dest': 'learning_mode'},
        
        # –ü–µ—Ä–µ—Ö–æ–¥—ã –∏–∑ learning_mode
        {'trigger': 'back', 'source': 'learning_mode', 'dest': 'start'},
        {'trigger': 'back', 'source': 'learning_mode', 'dest': 'writing_words'},
        {'trigger': 'continue_learning', 'source': 'learning_mode', 'dest': 'writing_words'},
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
        {'trigger': 'reset', 'source': '*', 'dest': 'start'}
    ]

class User:
    def __init__(self, chat_id):
        self.chat_id = chat_id
        self.words = []
        self.current_word = None  # –¢–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.word_to_check = None  # –°–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏
        self.current_word_index = 0  # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
        self.waiting_for_edit = None  # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.machine = Machine(model=self, states=LearnBot.states, 
                             transitions=LearnBot.transitions, initial='start')
    
    def add_word(self, czech, translation):
        if (czech, translation) not in self.words:
            self.words.append((czech, translation))
            return True
        return False
    
    def get_words_list(self):
        return '\n'.join([f'{i+1}. {cz} - {tr}' for i, (cz, tr) in enumerate(self.words)])
    
    def get_next_word(self):
        if not self.words:
            return None
        
        if self.current_word_index >= len(self.words):
            self.current_word_index = 0  # –°–±—Ä–æ—Å –Ω–∞ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
            
        word = self.words[self.current_word_index]
        self.current_word_index += 1
        return word
    
    def clear_words(self):
        self.words = []
        self.current_word_index = 0
    
    def check_translation(self, user_translation):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∞"""
        if not self.word_to_check:
            return False
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        correct_translation = self.word_to_check[1].lower().strip()
        user_translation = user_translation.lower().strip()
        
        return correct_translation == user_translation
    
    def get_word_by_index(self, index):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–æ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
        if 0 <= index < len(self.words):
            return self.words[index]
        return None
    
    def remove_word(self, index):
        """–£–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–æ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
        if 0 <= index < len(self.words):
            del self.words[index]
            if self.current_word_index >= len(self.words):
                self.current_word_index = 0
            return True
        return False
    
    def edit_word(self, index, new_czech, new_translation):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–≤–æ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
        if 0 <= index < len(self.words):
            self.words[index] = (new_czech, new_translation)
            return True
        return False

def schedule_daily_messages():
    while True:
        now = datetime.now().time()
        target_time = time(7, 0)
        
        if target_time.hour == now.hour and target_time.minute == now.minute:
            send_daily_words()
            sleep_time.sleep(61)
        else:
            sleep_time.sleep(30)

def send_daily_words():
    for chat_id, user in user_states.items():
        if user.machine.state == 'learning_mode' and user.words:
            word = user.get_next_word()
            if word:
                user.current_word = word
                user.word_to_check = word
                
                markup = types.InlineKeyboardMarkup()
                show_answer_btn = types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"show_answer_{chat_id}")
                markup.add(show_answer_btn)
                
                bot.send_message(chat_id, f"–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ: {word[0]} - ?", reply_markup=markup)

@bot.message_handler(commands=['clear'])
def clear_words(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("/back"))
    if chat_id in user_states:
        user = user_states[chat_id]
        user.clear_words()
        bot.send_message(chat_id, '"–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –æ—á–∏—â–µ–Ω!"', reply_markup=markup)
    else:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤.")

@bot.message_handler(commands=['practice'])
def practice_words(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å–ª–æ–≤ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è"""
    chat_id = message.chat.id
    if chat_id not in user_states:
        user_states[chat_id] = User(chat_id)
    
    user = user_states[chat_id]
    
    if not user.words:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏. –î–æ–±–∞–≤—å—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞.")
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø—Ä–∞–∫—Ç–∏–∫–∏
    user.current_word = None
    user.word_to_check = None
    user.current_word_index = 0
    user.waiting_for_edit = None
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è
    user.machine.state = 'learning_mode'
    
    word = user.get_next_word()
    if word:
        user.current_word = word
        user.word_to_check = word
        
        markup = types.InlineKeyboardMarkup()
        show_answer_btn = types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"show_answer_{chat_id}")
        markup.add(show_answer_btn)
        
        bot.send_message(chat_id, f"–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ: {word[0]} - ?", reply_markup=markup)

@bot.message_handler(commands=['edit'])
def edit_words(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤"""
    chat_id = message.chat.id
    if chat_id not in user_states:
        user_states[chat_id] = User(chat_id)
    
    user = user_states[chat_id]
    
    if not user.words:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    
    user.waiting_for_edit = 'edit'
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("/back"))
    
    bot.send_message(chat_id, f"üìù –í–∞—à–∏ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n{user.get_words_list()}\n\n"
                     "–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞ –∏ –Ω–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                     "–Ω–æ–º–µ—Ä - –Ω–æ–≤–æ–µ_—á–µ—à—Å–∫–æ–µ_—Å–ª–æ–≤–æ - –Ω–æ–≤—ã–π_–ø–µ—Ä–µ–≤–æ–¥\n"
                     "–ù–∞–ø—Ä–∏–º–µ—Ä: 1 - dƒõkuji - —Å–ø–∞—Å–∏–±–æ", reply_markup=markup)

@bot.message_handler(commands=['delete'])
def delete_words(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤"""
    chat_id = message.chat.id
    if chat_id not in user_states:
        user_states[chat_id] = User(chat_id)
    
    user = user_states[chat_id]
    
    if not user.words:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    user.waiting_for_edit = 'delete'
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("/back"))
    
    bot.send_message(chat_id, f"üóëÔ∏è –í–∞—à–∏ —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n{user.get_words_list()}\n\n"
                     "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞.\n"
                     "–ù–∞–ø—Ä–∏–º–µ—Ä: 1", reply_markup=markup)

@bot.message_handler(commands=['start', 'reset'])
def start(message):
    chat_id = message.chat.id
    if chat_id not in user_states:
        user_states[chat_id] = User(chat_id)
    
    user = user_states[chat_id]
    
    # –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    user.current_word = None
    user.word_to_check = None
    user.current_word_index = 0
    user.waiting_for_edit = None
    
    user.reset()
    
    bot.send_message(chat_id, '–ü—Ä–∏–≤–µ—Ç!')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("/help"))
    markup.add(types.KeyboardButton("/learn"), types.KeyboardButton("/practice"))
    markup.add(types.KeyboardButton("/list"), types.KeyboardButton("/edit"), types.KeyboardButton("/delete"))
    bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:', reply_markup=markup)

@bot.message_handler(commands=['help'])
def help_button(message):
    chat_id = message.chat.id
    if chat_id not in user_states:
        user_states[chat_id] = User(chat_id)
    
    user = user_states[chat_id]
    user.help()
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item2 = types.KeyboardButton("/learn")
    markup.add(item2)
    bot.send_message(chat_id, '–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —á–µ—à—Å–∫–∏—Ö —Å–ª–æ–≤ –ú–∞—Ä–∫–æ–º –ë—Ä–∞–≥—É—Ç–æ–π\n'
                     '–≠—Ç–æ –∫—Å—Ç–∞—Ç–∏ instagram –°–æ–∑–¥–∞—Ç–µ–ª—è: @MarkBragyta\n'
                     '–ñ–º—è–∫–∞–π –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å', reply_markup=markup)

@bot.message_handler(commands=['learn'])
def get_words(message):
    chat_id = message.chat.id
    if chat_id not in user_states:
        user_states[chat_id] = User(chat_id)
    
    user = user_states[chat_id]
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–ª–æ–≤
    user.current_word = None
    user.word_to_check = None
    user.waiting_for_edit = None
    
    user.go()
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("/back")
    markup.add(item1)
    bot.send_message(chat_id, '–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π –Ω–∞—á–Ω—ë–º.\n'
                     '–í—ã –±—É–¥–µ—Ç–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –º–Ω–µ —Å–ª–æ–≤–∞ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ:\n'
                     '"ƒçesk√© slovo" - "–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥"\n'
                     '–ê —è –±—É–¥—É –∏—Ö —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏—Ö –ø–æ–≤—Ç–æ—Ä—è—Ç—å!\n'
                     '–ï—Å–ª–∏ –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ, —Ç–æ –ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–∞!"', reply_markup=markup)

@bot.message_handler(commands=['back'])
def back_command(message):
    chat_id = message.chat.id
    if chat_id not in user_states:
        user_states[chat_id] = User(chat_id)
    
    user = user_states[chat_id]
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
    user.current_word = None
    user.word_to_check = None
    user.waiting_for_edit = None
    
    try:
        user.back()
    except Exception as e:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user.machine.state = 'start'
    
    if user.machine.state == 'start':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("/help"))
        markup.add(types.KeyboardButton("/learn"), types.KeyboardButton("/practice"))
        markup.add(types.KeyboardButton("/list"), types.KeyboardButton("/edit"), types.KeyboardButton("/delete"))
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:', reply_markup=markup)
    elif user.machine.state == 'writing_words':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("/list"), types.KeyboardButton("/ready"), types.KeyboardButton("/back"))
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Å–ª–æ–≤. –ü–∏—à–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥".', 
                         reply_markup=markup)
    elif user.machine.state == 'checking_words':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("/back"), types.KeyboardButton("/ready"), types.KeyboardButton("/clear"))
        bot.send_message(chat_id, '–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Å–ª–æ–≤, –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è.', 
                         reply_markup=markup)

@bot.message_handler(commands=['list'])
def show_words(message):
    chat_id = message.chat.id
    if chat_id not in user_states:
        user_states[chat_id] = User(chat_id)
    
    user = user_states[chat_id]
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
    user.current_word = None
    user.word_to_check = None
    user.waiting_for_edit = None
    
    try:
        user.list()
    except Exception as e:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ checking_words
        user.machine.state = 'checking_words'
    
    if user.words:
        bot.send_message(chat_id, f'üìñ –í–∞—à–∏ —Å–ª–æ–≤–∞:\n{user.get_words_list()}')
    else:
        bot.send_message(chat_id, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤.')
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("/back"), types.KeyboardButton("/ready"), types.KeyboardButton("/clear"))
    bot.send_message(chat_id, '–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Å–ª–æ–≤, –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è.', 
                     reply_markup=markup)

@bot.message_handler(commands=['ready'])
def ready_to_learn(message):
    chat_id = message.chat.id
    if chat_id not in user_states:
        user_states[chat_id] = User(chat_id)
    
    user = user_states[chat_id]
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
    user.current_word = None
    user.word_to_check = None
    user.waiting_for_edit = None
    
    try:
        user.ready()
    except Exception as e:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ learning_mode
        user.machine.state = 'learning_mode'
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("/back"))
    
    if user.words:
        bot.send_message(chat_id, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è! –ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 7:00 —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Å–ª–æ–≤–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.\n'
                         '–£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞!)', reply_markup=markup)
    else:
        bot.send_message(chat_id, '–£ –≤–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞.', 
                         reply_markup=markup)
        try:
            user.continue_learning()
        except Exception as e:
            user.machine.state = 'writing_words'

@bot.message_handler(content_types=['text'])
def handle_text(message):
    chat_id = message.chat.id
    if chat_id not in user_states:
        user_states[chat_id] = User(chat_id)
    
    user = user_states[chat_id]
    
    if user.machine.state == 'writing_words':
        if '-' in message.text:
            parts = message.text.split('-', 1)
            czech = parts[0].strip()
            translation = parts[1].strip()
            
            if user.add_word(czech, translation):
                bot.send_message(chat_id, f'–°–ª–æ–≤–æ "{czech}" - "{translation}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!')
            else:
                bot.send_message(chat_id, f'–≠—Ç–æ —Å–ª–æ–≤–æ "{czech}" - "{translation}" —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫!')
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("/list"), types.KeyboardButton("/ready"), types.KeyboardButton("/back"))
            bot.send_message(chat_id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)
        else:
            bot.send_message(chat_id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–º–µ—Ä: "dƒõkuji - —Å–ø–∞—Å–∏–±–æ"')
    
    elif user.machine.state == 'learning_mode':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        if user.word_to_check:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞
            if user.check_translation(message.text):
                bot.send_message(chat_id, '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! ‚úÖ')
                user.word_to_check = None
                user.current_word = None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
                if user.words:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
                    word = user.get_next_word()
                    if word:
                        user.current_word = word
                        user.word_to_check = word
                        
                        markup = types.InlineKeyboardMarkup()
                        show_answer_btn = types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"show_answer_{chat_id}")
                        markup.add(show_answer_btn)
                        
                        bot.send_message(chat_id, f"–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ: {word[0]} - ?", reply_markup=markup)
                    else:
                        bot.send_message(chat_id, '–í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞! –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ.')
                        user.continue_learning()
                else:
                    bot.send_message(chat_id, '–í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞! –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ.')
                    user.continue_learning()
            else:
                bot.send_message(chat_id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
                if user.current_word:
                    user.words.append(user.current_word)
                    user.current_word = None
                    user.word_to_check = None
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–æ –º—ã –≤ —Ä–µ–∂–∏–º–µ –æ–±—É—á–µ–Ω–∏—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É
            bot.send_message(chat_id, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /practice –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å–ª–æ–≤.')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤
    elif user.waiting_for_edit == 'edit':
        if '-' in message.text and message.text.count('-') >= 2:
            parts = message.text.split('-', 2)
            try:
                word_index = int(parts[0].strip()) - 1  # -1 –ø–æ—Ç–æ–º—É —á—Ç–æ –∏–Ω–¥–µ–∫—Å—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
                new_czech = parts[1].strip()
                new_translation = parts[2].strip()
                
                if user.edit_word(word_index, new_czech, new_translation):
                    bot.send_message(chat_id, f'–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: "{new_czech}" - "{new_translation}"')
                else:
                    bot.send_message(chat_id, '–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞')
            except ValueError:
                bot.send_message(chat_id, '–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 1 - dƒõkuji - —Å–ø–∞—Å–∏–±–æ')
        else:
            bot.send_message(chat_id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–º–µ—Ä: 1 - dƒõkuji - —Å–ø–∞—Å–∏–±–æ')
        
        user.waiting_for_edit = None
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤
    elif user.waiting_for_edit == 'delete':
        try:
            word_index = int(message.text.strip()) - 1  # -1 –ø–æ—Ç–æ–º—É —á—Ç–æ –∏–Ω–¥–µ–∫—Å—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
            word = user.get_word_by_index(word_index)
            if word and user.remove_word(word_index):
                bot.send_message(chat_id, f'–°–ª–æ–≤–æ "{word[0]}" - "{word[1]}" —É–¥–∞–ª–µ–Ω–æ')
            else:
                bot.send_message(chat_id, '–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞')
        except ValueError:
            bot.send_message(chat_id, '–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1)')
        
        user.waiting_for_edit = None

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
threading.Thread(target=schedule_daily_messages, daemon=True).start()

@bot.callback_query_handler(func=lambda call: call.data.startswith('show_answer_'))
def show_answer_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç'"""
    chat_id = int(call.data.split('_')[2])
    
    if chat_id in user_states:
        user = user_states[chat_id]
        if user.word_to_check:
            correct_answer = user.word_to_check[1]
            bot.answer_callback_query(call.id, f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
            bot.send_message(chat_id, f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ
            user.word_to_check = None
            user.current_word = None
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
            if user.words:
                word = user.get_next_word()
                if word:
                    user.current_word = word
                    user.word_to_check = word
                    
                    markup = types.InlineKeyboardMarkup()
                    show_answer_btn = types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"show_answer_{chat_id}")
                    markup.add(show_answer_btn)
                    
                    bot.send_message(chat_id, f"–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ: {word[0]} - ?", reply_markup=markup)
                else:
                    bot.send_message(chat_id, '–í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞! –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ.')
                    user.continue_learning()
            else:
                bot.send_message(chat_id, '–í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞! –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ.')
                user.continue_learning()

bot.polling(none_stop=True, interval=0)
