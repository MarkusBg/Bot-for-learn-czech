import tg
import telebot
from telebot import types
from transitions import Machine
from datetime import datetime, time
import time as sleep_time
import threading

bot = telebot.TeleBot(tg.token)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

class LearnBot:
    states = ['start', 'writing_words', 'checking_words', 'learning_mode']
    
    transitions = [
        # –ü–µ—Ä–µ—Ö–æ–¥—ã –∏–∑ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        {'trigger': 'go', 'source': 'start', 'dest': 'writing_words'},
        {'trigger': 'help', 'source': 'start', 'dest': 'start'},
        
        # –ü–µ—Ä–µ—Ö–æ–¥—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è writing_words
        {'trigger': 'list', 'source': 'writing_words', 'dest': 'checking_words'},
        {'trigger': 'ready', 'source': 'writing_words', 'dest': 'learning_mode'},
        {'trigger': 'back', 'source': 'writing_words', 'dest': 'start'},
        
        # –ü–µ—Ä–µ—Ö–æ–¥—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è checking_words
        {'trigger': 'back', 'source': 'checking_words', 'dest': 'writing_words'},
        {'trigger': 'ready', 'source': 'checking_words', 'dest': 'learning_mode'},
        
        # –ü–µ—Ä–µ—Ö–æ–¥—ã –∏–∑ learning_mode
        {'trigger': 'back', 'source': 'learning_mode', 'dest': 'start'},
        {'trigger': 'back', 'source': 'learning_mode', 'dest': 'writing_words'},
        {'trigger': 'continue_learning', 'source': 'learning_mode', 'dest': 'writing_words'},
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
        {'trigger': 'reset', 'source': '*', 'dest': 'start'}
    ]

class User:
    def __init__(self, chat_id):
        self.chat_id = chat_id
        self.words = []
        self.current_word = None  # –¢–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.word_to_check = None  # –°–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.machine = Machine(model=self, states=LearnBot.states, 
                             transitions=LearnBot.transitions, initial='start')
    
    def add_word(self, czech, translation):
        if (czech, translation) not in self.words:
            self.words.append((czech, translation))
            return True
        return False
    
    def get_words_list(self):
        return '\n'.join([f'{cz} - {tr}' for cz, tr in self.words])
    
    def get_next_word(self):
        if not self.words:
            return None
        
        if self.current_word_index >= len(self.words):
            self.current_word_index = 0  # –°–±—Ä–æ—Å –Ω–∞ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
            
        word = self.words[self.current_word_index]
        self.current_word_index += 1
        return word
    
    def clear_words(self):
        self.words = []
        self.current_word_index = 0

def schedule_daily_messages():
    while True:
        now = datetime.now().time()
        target_time = time(7, 0)
        
        if target_time.hour == now.hour and target_time.minute == now.minute:
            send_daily_words()
            sleep_time.sleep(61)
        else:
            sleep_time.sleep(30)

def send_daily_words():
    for chat_id, user in user_states.items():
        if user.state == 'learning_mode' and user.words:
            word = user.get_next_word()
            if word:
                bot.send_message(chat_id, f"–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ: {word[0]} - ?")

@bot.message_handler(commands=['clear'])
def clear_words(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("/back"))
    if chat_id in user_states:
        user = user_states[chat_id]
        user.clear_words()
        bot.send_message(chat_id, '"–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –æ—á–∏—â–µ–Ω!"', reply_markup=markup)
    else:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤.")

@bot.message_handler(commands=['start', 'reset'])
def start(message):
    chat_id = message.chat.id
    if chat_id not in user_states:
        user_states[chat_id] = User(chat_id)
    
    user = user_states[chat_id]
    user.reset()
    
    bot.send_message(chat_id, '–ü—Ä–∏–≤–µ—Ç!')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("/help")
    markup.add(item1)
    bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:', reply_markup=markup)

@bot.message_handler(commands=['help'])
def help_button(message):
    chat_id = message.chat.id
    if chat_id not in user_states:
        user_states[chat_id] = User(chat_id)
    
    user = user_states[chat_id]
    user.help()
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item2 = types.KeyboardButton("/learn")
    markup.add(item2)
    bot.send_message(chat_id, '–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —á–µ—à—Å–∫–∏—Ö —Å–ª–æ–≤ –ú–∞—Ä–∫–æ–º –ë—Ä–∞–≥—É—Ç–æ–π\n'
                     '–≠—Ç–æ –∫—Å—Ç–∞—Ç–∏ instagram –°–æ–∑–¥–∞—Ç–µ–ª—è: @MarkBragyta\n'
                     '–ñ–º—è–∫–∞–π –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å', reply_markup=markup)

@bot.message_handler(commands=['learn'])
def get_words(message):
    chat_id = message.chat.id
    if chat_id not in user_states:
        user_states[chat_id] = User(chat_id)
    
    user = user_states[chat_id]
    user.go()
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("/back")
    markup.add(item1)
    bot.send_message(chat_id, '–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π –Ω–∞—á–Ω—ë–º.\n'
                     '–í—ã –±—É–¥–µ—Ç–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –º–Ω–µ —Å–ª–æ–≤–∞ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ:\n'
                     '"ƒçesk√© slovo" - "–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥"\n'
                     '–ê —è –±—É–¥—É –∏—Ö —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏—Ö –ø–æ–≤—Ç–æ—Ä—è—Ç—å!\n'
                     '–ï—Å–ª–∏ –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ, —Ç–æ –ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–∞!"', reply_markup=markup)

@bot.message_handler(commands=['back'])
def back_command(message):
    chat_id = message.chat.id
    if chat_id not in user_states:
        user_states[chat_id] = User(chat_id)
    
    user = user_states[chat_id]
    user.back()
    
    if user.state == 'start':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item3 = types.KeyboardButton("/learn")
        markup.add(item3)
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥, –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "learn" —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤', 
                         reply_markup=markup)
    elif user.state == 'writing_words':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("/list"), types.KeyboardButton("/ready"), types.KeyboardButton("/back"))
        bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª—Å—è –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Å–ª–æ–≤. –ü–∏—à–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥".', 
                         reply_markup=markup)
        

@bot.message_handler(commands=['list'])
def show_words(message):
    chat_id = message.chat.id
    if chat_id not in user_states:
        user_states[chat_id] = User(chat_id)
    
    user = user_states[chat_id]
    user.list()
    
    if user.words:
        bot.send_message(chat_id, f'üìñ –í–∞—à–∏ —Å–ª–æ–≤–∞:\n{user.get_words_list()}')
    else:
        bot.send_message(chat_id, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤.')
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("/back"), types.KeyboardButton("/ready"), types.KeyboardButton("/clear"))
    bot.send_message(chat_id, '–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Å–ª–æ–≤, –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è.', 
                     reply_markup=markup)

@bot.message_handler(commands=['ready'])
def ready_to_learn(message):
    chat_id = message.chat.id
    if chat_id not in user_states:
        user_states[chat_id] = User(chat_id)
    
    user = user_states[chat_id]
    user.ready()
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("/back"))
    
    if user.words:
        bot.send_message(chat_id, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è! –ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 7:00 —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Å–ª–æ–≤–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.\n'
                         '–£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞!)', reply_markup=markup)
    else:
        bot.send_message(chat_id, '–£ –≤–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞.', 
                         reply_markup=markup)
        user.continue_learning()

@bot.message_handler(content_types=['text'])
def handle_text(message):
    chat_id = message.chat.id
    if chat_id not in user_states:
        user_states[chat_id] = User(chat_id)
    
    user = user_states[chat_id]
    
    if user.state == 'writing_words':
        if '-' in message.text:
            parts = message.text.split('-', 1)
            czech = parts[0].strip()
            translation = parts[1].strip()
            
            if user.add_word(czech, translation):
                bot.send_message(chat_id, f'–°–ª–æ–≤–æ "{czech}" - "{translation}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!')
            else:
                bot.send_message(chat_id, f'–≠—Ç–æ —Å–ª–æ–≤–æ "{czech}" - "{translation}" —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫!')
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("/list"), types.KeyboardButton("/ready"), types.KeyboardButton("/back"))
            bot.send_message(chat_id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)
        else:
            bot.send_message(chat_id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–º–µ—Ä: "dƒõkuji - —Å–ø–∞—Å–∏–±–æ"')
    
    elif user.state == 'learning_mode' and user.word_to_check:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞
        if user.check_translation(message.text):
            bot.send_message(chat_id, '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! ‚úÖ')
            user.word_to_check = None
            
            if not user.words:
                bot.send_message(chat_id, '–í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞! –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ.')
                user.continue_learning()
        else:
            bot.send_message(chat_id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
            if user.current_word:
                user.words.append(user.current_word)
                user.current_word = None
                user.word_to_check = None

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
threading.Thread(target=schedule_daily_messages, daemon=True).start()

bot.polling(none_stop=True, interval=0)
